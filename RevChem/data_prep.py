# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_data_inspect.ipynb.

# %% auto 0
__all__ = ['align_data', 'separate_aligned_to_source', 'df_to_coordinate_stream', 'translate_cornered_to_centered',
           'translate_centered_to_cornered', 'pl_translate_cornered_to_centered', 'pl_translate_centered_to_cornered']

# %% ../nbs/02_data_inspect.ipynb 2
import polars as pl

# %% ../nbs/02_data_inspect.ipynb 27
def align_data(
    tobii_df: pl.DataFrame, re_df: pl.DataFrame, *, asof_strategy="backward"
):
    """Align Tobii and RealEye dataframes

    Keyword Args:
        - asof_strategy: strategy for filling on join (Default: "backward")
    """
    tobii_df = tobii_df.sort(by="timestamp")
    re_df = re_df.sort(by="timestamp")
    df_aligned = (
        tobii_df.rename({"X": "X_tobii", "Y": "Y_tobii"})
        .join_asof(
            re_df.rename({"timestamp": "timestamp_RE", "X": "X_RE", "Y": "Y_RE"}),
            left_on="timestamp",
            right_on="timestamp_RE",  # ?: becomes "timestamp_right"
            strategy=asof_strategy,
            coalesce=False,
        )
        .filter(  # just the tobii data that is aligned with the RealEye data points
            pl.col("timestamp")
            > (
                tobii_df["timestamp"].min()
                + (re_df["timestamp"].min() - tobii_df["timestamp"].min())
            )
        )
        .rename({"timestamp": "timestamp_tobii"})
    )
    # this interpolation is probably unnecessary, because the strategy does this in the background
    df_aligned = df_aligned.with_columns(
        pl.col("X_RE").interpolate().alias("X_RE_interp"),
        pl.col("Y_RE").interpolate().alias("Y_RE_interp"),
    )
    return df_aligned

# %% ../nbs/02_data_inspect.ipynb 28
import polars.selectors as cs

# %% ../nbs/02_data_inspect.ipynb 29
def separate_aligned_to_source(
    aligned_df: pl.DataFrame,
    *,
    correct_naming: bool=False
) -> tuple[pl.DataFrame, pl.DataFrame]:

    selector_tobii = cs.ends_with("_tobii")
    selector_realeye = cs.ends_with("_RE")


    tobii_out, re_out = aligned_df.select(selector_tobii), aligned_df.select(selector_realeye)

    if correct_naming:
        tobii_out = tobii_out.rename(lambda name: name.replace("_tobii", ""))
        re_out = re_out.rename(lambda name: name.replace("_RE", ""))
    
    return tobii_out, re_out

# %% ../nbs/02_data_inspect.ipynb 32
def df_to_coordinate_stream(df: pl.DataFrame, x_: str = "x", y_: str = "y"):
    return list(df[[x_, y_]].iter_rows())

# %% ../nbs/02_data_inspect.ipynb 39
def translate_cornered_to_centered(
    coordinates: list[tuple[int | float, int | float]], X_max: int, Y_max: int
):
    "Given the Top left is (0,0) so subtracing the median of the screen dimensions translates to center-screen origin"
    return [(x - X_max // 2, Y_max // 2 - y) for (x, y) in coordinates]


def translate_centered_to_cornered(
    coordinates: list[tuple[int | float, int | float]], X_max: int, Y_max: int
):
    "Translate the center-screen-origin coordinate to a top-left origin coordinate"
    return [(x + X_max // 2, Y_max // 2 - y) for (x, y) in coordinates]

# %% ../nbs/02_data_inspect.ipynb 43
# the polars version of the above algorithms
# written in this way to make them "functions".
# Could just as easily cut a little code and then call "df.with_columns()" at the call-site

def pl_translate_cornered_to_centered(
    df: pl.DataFrame,
    X_max: int = 1920,
    Y_max: int = 1080,
    *,
    x_name: str = "X",
    y_name: str = "Y",
):
    "Translate top left coordinate to center-screen origin"
    return df.with_columns(pl.col(x_name) - X_max // 2, pl.col(y_name).neg() + Y_max // 2)


def pl_translate_centered_to_cornered(
    df: pl.DataFrame,
    X_max: int = 1920,
    Y_max: int = 1080,
    *,
    x_name: str = "X",
    y_name: str = "Y",
):
    "Translate the center-screen-origin coordinate to a top-left origin coordinate"
    return df.with_columns(pl.col(x_name) + X_max // 2, pl.col(y_name).neg() + Y_max // 2)
