# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_common.ipynb.

# %% auto 0
__all__ = ['T', 'fst', 'snd', 'group_by', 'partition', 'first', 'second', 'dt_str_now', 'date_str_now', 'datetime_to_stamp',
           'list_concat']

# %% ../nbs/00_common.ipynb 1
from collections import defaultdict
from typing import Any, Callable, Iterable

def group_by(grouper: Callable, items: Iterable[Any]) -> dict[any, any]:
    groups = defaultdict(list)
    for item in items:
        groups[grouper(item)].append(item)
    return groups

# %% ../nbs/00_common.ipynb 2
from typing import Callable, TypeVar

T = TypeVar("T")
type Predicate[T] = Callable[[T], bool]


def partition(
    criterion: Predicate[T],  # Filtering condition
    items: Iterable[T],  # Objects that may meet the criterion
) -> tuple[list[T], list[T]]:  # Tuple of (matches, misses)
    "Apply `criterion` to `items` to generate a list of those matching and not matching"
    matches, misses = [], []
    for item in items:
        if criterion(item): matches.append(item)
        else: misses.append(item)
    
    return matches, misses

# %% ../nbs/00_common.ipynb 4
def first(iterable):
    _it = iter(iterable)
    return next(_it)
def second(iterable):
    _it = iter(iterable)
    next(_it)
    return next(_it)
fst = first
snd = second

# %% ../nbs/00_common.ipynb 5
from datetime import datetime, UTC

def dt_str_now() -> str:
    return datetime.now(UTC).strftime("%Y-%m-%d-%H%M")

def date_str_now() -> str:
    """Export a date string year-month-day"""
    return datetime.now(UTC).strftime("%Y-%m-%d")

def datetime_to_stamp(dt: datetime = None) -> str:
    """Convert datetime to format YYYYMMDDHHMM (e.g. 202507171140)"""
    if dt is None:
        dt = datetime.now()
    return dt.strftime("%Y%m%d%H%M")

# Usage example
# stamp = datetime_to_stamp(datetime(2025, 7, 17, 11, 40))  # Returns '202507171140'
# stamp = datetime_to_stamp()  # Returns current time in YYYYMMDDHHMM format


# %% ../nbs/00_common.ipynb 6
def list_concat(lists: list[list]) -> list:
    result = [
        item for l_ in lists for item in l_
    ]
    return result
