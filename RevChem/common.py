# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_common.ipynb.

# %% auto 0
__all__ = ['T', 'group_by', 'partition', 'dt_str_now', 'date_str_now', 'list_concat']

# %% ../nbs/00_common.ipynb 1
from typing import Any, Iterable
def group_by(grouper: 'Callable', items: Iterable[Any]) -> dict[any, any]:
    from collections import defaultdict
    groups = defaultdict(list)
    for item in items:
        groups[grouper(item)].append(item)
    return groups

# %% ../nbs/00_common.ipynb 2
from typing import Callable, TypeVar

T = TypeVar("T")
type Predicate[T] = Callable[[T], bool]


def partition(
    criterion: Predicate[T],  # Filtering condition
    items: Iterable[T],  # Objects that may meet the criterion
) -> tuple[list[T], list[T]]:  # Tuple of (matches, misses)
    "Apply `criterion` to `items` to generate a list of those matching and not matching"
    matches, misses = [], []
    for item in items:
        if criterion(item): matches.append(item)
        else: misses.append(item)
    
    return matches, misses

# %% ../nbs/00_common.ipynb 4
from datetime import datetime, UTC

def dt_str_now() -> str:
    return datetime.now(UTC).strftime("%Y-%m-%d-%H%M")

def date_str_now() -> str:
    "year-month-day"
    return datetime.now(UTC).strftime("%Y-%m-%d")

# %% ../nbs/00_common.ipynb 5
def list_concat(lists: list[list]) -> list:
    result = [
        item for l_ in lists for item in l_
    ]
    return result
